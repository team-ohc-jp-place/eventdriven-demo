---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: legacy-app
    app.kubernetes.io/component: legacy-app
    app.kubernetes.io/instance: legacy-app
  name: legacy-app
  annotations:
    argocd.argoproj.io/sync-wave: "2"  
spec:
  lookupPolicy:
    local: false
  tags:
  - annotations:
      openshift.io/imported-from: quay.io/hguerreroo/my-apache-php-app:latest:latest
    from:
      kind: DockerImage
      name: quay.io/hguerreroo/my-apache-php-app:latest
    name: latest
    referencePolicy:
      type: Local
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: legacy-app
    app.kubernetes.io/component: legacy-app
    app.kubernetes.io/instance: legacy-app
    app.kubernetes.io/part-of: enterprise-app
    app.openshift.io/runtime: php
  name: legacy-app
  annotations:
    argocd.argoproj.io/sync-wave: "2"  
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: legacy-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        deployment: legacy-app
    spec:
      containers:
      - env:
        - name: SERVER_NAME
          value: mssql-server-linux
        image: image-registry.openshift-image-registry.svc:5000/legacy-app/legacy-app:latest
        name: legacy-app
        ports:
        - containerPort: 80
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: legacy-app
    app.kubernetes.io/component: legacy-app
    app.kubernetes.io/instance: legacy-app
  name: legacy-app
  annotations:
    argocd.argoproj.io/sync-wave: "2"  
spec:
  ports:
  - name: 80-tcp
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    deployment: legacy-app
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: data-sql
  annotations:
    argocd.argoproj.io/sync-wave: "2"
data:
  data.sql: |-
    -- Create a new database called 'InternationalDB'
    -- Connect to the 'master' database to run this snippet
    USE master
    GO
    -- Create the new database if it does not exist already
    IF NOT EXISTS (
        SELECT name
            FROM sys.databases
            WHERE name = N'InternationalDB'
    )
    CREATE DATABASE InternationalDB
    GO
    -- Connect to the 'InternationalDB' database to run this snippet
    USE InternationalDB
    GO
    -- Create a new table called 'Orders' in schema 'dbo'
    -- Drop the table if it already exists
    IF OBJECT_ID('dbo.Orders', 'U') IS NOT NULL
    DROP TABLE dbo.Orders
    GO
    -- Create the table in the specified schema
    CREATE TABLE dbo.Orders
    (
        OrderId INT IDENTITY(1,1) NOT NULL PRIMARY KEY, -- primary key column
        OrderType [NVARCHAR](1) NOT NULL,
        OrderItemName [NVARCHAR](50) NOT NULL,
        Quantity INT NOT NULL,
        Price [NVARCHAR](50) NOT NULL,
        ShipmentAddress [NVARCHAR](100) NOT NULL,
        ZipCode [NVARCHAR](10) NOT NULL,
        OrderUser [NVARCHAR](10) NOT NULL
        -- specify more columns here
    );
    GO
    -- Create a new stored procedure called 'SpInsertOrder' in schema 'dbo'
    -- Drop the stored procedure if it already exists
    IF EXISTS (
    SELECT *
        FROM INFORMATION_SCHEMA.ROUTINES
    WHERE SPECIFIC_SCHEMA = N'dbo'
        AND SPECIFIC_NAME = N'SpInsertOrder'
    )
    DROP PROCEDURE dbo.SpInsertOrder
    GO
    -- Create the stored procedure in the specified schema
    CREATE PROCEDURE dbo.SpInsertOrder
        @type NVARCHAR(1),
        @item NVARCHAR(50),
        @quantity INT,
        @price NVARCHAR(50),
        @shipaddress NVARCHAR(100),
        @zipcode NVARCHAR(10),
        @orderuser NVARCHAR(10)
    AS
        INSERT INTO Orders
        ( -- columns to insert data into
         [OrderType], [OrderItemName], [Quantity], [Price], [ShipmentAddress], [ZipCode], [OrderUser]
        )
        VALUES
        ( -- first row: values for the columns in the list above
         @type, @item, @quantity, @price, @shipaddress, @zipcode, @orderuser
        )
        GO
    GO
    -- Enable Database for CDC template
    EXEC sys.sp_cdc_enable_db
    GO
    -- Enable a Table 
    EXEC sys.sp_cdc_enable_table
    @source_schema = N'dbo',
    @source_name = N'Orders',
    @role_name = NULL,
    @supports_net_changes = 1
    GO
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: legacy-app
  namespace: legacy-app
  labels:
    app: legacy-app
    app.kubernetes.io/component: legacy-app
    app.kubernetes.io/instance: eventdriven-demo-legacy-app
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  to:
    kind: Service
    name: legacy-app
  tls:
    insecureEdgeTerminationPolicy: Redirect
  port:
    targetPort: 80-tcp