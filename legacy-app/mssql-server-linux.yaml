---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: mssql-server-linux
  annotations:
    app.openshift.io/connects-to: debezium
    argocd.argoproj.io/sync-wave: "1" 
  labels:
    app: mssql-server-linux
    app.kubernetes.io/component: mssql-server-linux
    app.kubernetes.io/instance: mssql-server-linux
    app.kubernetes.io/part-of: enterprise-app
    app.openshift.io/runtime: mssql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mssql-server-linux
  template:
    metadata:
      labels:
        app: mssql-server-linux
        deploymentconfig: mssql-server-linux
    spec:
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: mssql-server-volume
        - name: data-sql
          configMap:
            name: data-sql
            defaultMode: 420
      containers:
        - name: mssql-server-linux
          env:
            - name: ACCEPT_EULA
              value: 'Y'
            - name: SA_PASSWORD
              value: Password!
            - name: MSSQL_PID
              value: Standard
            - name: MSSQL_AGENT_ENABLED
              value: 'true'
          image: quay.io/tatsuyak8i/mssql-docker:1.1
          ports:
            - containerPort: 1433
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data-sql
              mountPath: /usr/config/setup.sql
              subPath: data.sql
            - name: db-data
              mountPath: /var/opt/mssql
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: Recreate
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mssql-server-volume
  labels:
    app: mssql-server-linux
    deploymentconfig: mssql-server-linux
  annotations:
    argocd.argoproj.io/sync-wave: "1"  
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1G
  volumeMode: Filesystem
---
kind: Service
apiVersion: v1
metadata:
  name: mssql-server-linux
  labels:
    app: mssql-server-linux
    app.kubernetes.io/component: mssql-server-linux
    app.kubernetes.io/instance: mssql-server-linux
    app.kubernetes.io/part-of: enterprise-app
  annotations:
    argocd.argoproj.io/sync-wave: "1"  
spec:
  ports:
    - protocol: TCP
      port: 1433
      targetPort: 1433
  selector:
    app: mssql-server-linux
  type: ClusterIP
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: data-sql
data:
  data.sql: |-
    -- Create a new database called 'InternationalDB'
    -- Connect to the 'master' database to run this snippet
    USE master
    GO
    -- Create the new database if it does not exist already
    IF NOT EXISTS (
        SELECT name
            FROM sys.databases
            WHERE name = N'InternationalDB'
    )
    CREATE DATABASE InternationalDB
    GO
    -- Connect to the 'InternationalDB' database to run this snippet
    USE InternationalDB
    GO
    -- Create a new table called 'Orders' in schema 'dbo'
    -- Drop the table if it already exists
    IF OBJECT_ID('dbo.Orders', 'U') IS NOT NULL
    DROP TABLE dbo.Orders
    GO
    -- Create the table in the specified schema
    CREATE TABLE dbo.Orders
    (
        OrderId INT IDENTITY(1,1) NOT NULL PRIMARY KEY, -- primary key column
        OrderType [NVARCHAR](1) NOT NULL,
        OrderItemName [NVARCHAR](50) NOT NULL,
        Quantity INT NOT NULL,
        Price [NVARCHAR](50) NOT NULL,
        ShipmentAddress [NVARCHAR](100) NOT NULL,
        ZipCode [NVARCHAR](10) NOT NULL,
        OrderUser [NVARCHAR](10) NOT NULL
        -- specify more columns here
    );
    GO
    -- Create a new stored procedure called 'SpInsertOrder' in schema 'dbo'
    -- Drop the stored procedure if it already exists
    IF EXISTS (
    SELECT *
        FROM INFORMATION_SCHEMA.ROUTINES
    WHERE SPECIFIC_SCHEMA = N'dbo'
        AND SPECIFIC_NAME = N'SpInsertOrder'
    )
    DROP PROCEDURE dbo.SpInsertOrder
    GO
    -- Create the stored procedure in the specified schema
    CREATE PROCEDURE dbo.SpInsertOrder
        @type NVARCHAR(1),
        @item NVARCHAR(50),
        @quantity INT,
        @price NVARCHAR(50),
        @shipaddress NVARCHAR(100),
        @zipcode NVARCHAR(10),
        @orderuser NVARCHAR(10)
    AS
        INSERT INTO Orders
        ( -- columns to insert data into
         [OrderType], [OrderItemName], [Quantity], [Price], [ShipmentAddress], [ZipCode], [OrderUser]
        )
        VALUES
        ( -- first row: values for the columns in the list above
         @type, @item, @quantity, @price, @shipaddress, @zipcode, @orderuser
        )
        GO
    GO
    -- Enable Database for CDC template
    EXEC sys.sp_cdc_enable_db
    GO
    -- Enable a Table 
    EXEC sys.sp_cdc_enable_table
    @source_schema = N'dbo',
    @source_name = N'Orders',
    @role_name = NULL,
    @supports_net_changes = 1
    GO